#' Add together two numbers
#'
#' @param gwas A data.frame. Columns "chr", "pos", and "pvalue" are required
#' @param build Genomic build. Currently hg18, hg19, and hg38 are supported
#' @param color1 Color for odd-numbered chromosomes
#' @param color2 Color for even-numbered chromosomes
#' @param y_scale When an own y-scale is provided then set this to TRUE to avoid an error. 
#' @param log10p If TRUE (default), the -log10 transformed pvalues are plotted
#' @param speed The speed option. Fast and ultrafast use scattermore functionality
#' @param pointsize Only when using the 'fast' option you can increase pointsize. Default is 0.
#' @param pixels Only when using the 'fast' option you can increase pixel width and height. Default is c(512, 512).
#' @return A ggplot object that makes a Manhattan plot.
#' @export
#' @examples
#' data(cad_gwas)
#' cad_gwas$y=-log10(cad_gwas$pval)
#' manhattan(cad_gwas,build='hg18')

manhattan=function(gwas, build=c('hg18','hg19','hg38'), color1='black', color2='grey', y_scale = TRUE,log10p=TRUE,
                   speed = c("slow", "fast", "ultrafast"),
                   pointsize=0, pixels=c(512, 512), ...){
  data=gwas

  if (!all(c('chr','pos','pvalue')%in%colnames(data))){
    stop('data must have chr, pos and pvalue')
  }
  
  
  
  if(is.numeric(data$chr)){
    print("Numeric chr column detected. Transformed to character by prefixing 'chr'.")
    data$chr <- paste0("chr", data$chr)
  }
  
  if (!is.numeric(data$pos)) 
    stop("pos column should be numeric.")
  
  if (!is.numeric(data$pvalue)) 
    stop("pvalue column should be numeric.")
  
  if(log10p) {
    data$y <- -log10(data$pvalue)
  }
  else {
    data$y <- data$pvalue
  }

  build=match.arg(build)
  speed=match.arg(speed)
  data=add_cumulative_pos(data,build)
  data=add_color(data,color1 = color1, color2 = color2)
  data=add_shape(data,shape=16)
  data=add_fill(data)
  chrom_lengths=get_chrom_lengths(build)
  xmax=get_total_length(chrom_lengths)
  x_breaks=get_x_breaks(chrom_lengths)

  color_map=unique(data$color)
  names(color_map)=unique(data$color)




  plot <- ggplot2::ggplot(data, ggplot2::aes(x=cumulative_pos,y=y,color=color))
  plot <- switch(speed,
         slow = plot + ggplot2::geom_point(),
         fast  = plot + scattermore::geom_scattermore(pointsize=pointsize, pixels=pixels,shape=16),
         ultrafast = ggplot2::ggplot() + scattermore::geom_scattermost(data[, c("cumulative_pos", "y")])
         )

  if(y_scale) plot <- plot + ggplot2::scale_y_continuous(expand=c(0.01,0),name=expression(-log[10](italic(p))))

  return(
    plot + ggplot2::theme_classic()+
      ggplot2::scale_x_continuous(limits=c(0,xmax),expand=c(0.01,0),breaks=x_breaks,
                                  labels=names(x_breaks),name='Chromosome')+
      ggplot2::scale_color_manual(values=color_map,guide='none'))
}
